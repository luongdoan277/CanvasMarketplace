@model ProductDTO
@{
    ViewData["Title"] = "ProuctDetail";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Shop Detail Start -->
<div class="container-fluid py-5">
    <div class="row px-xl-5">
        <div class="col-lg-5 pb-5">
            <div id="product-carousel" class="carousel slide" data-ride="carousel">
                <div class="carousel-inner border">
                    <div class="carousel-item active">
                        <div class="image-container">
                            <img src="@Model.ImageUrl" alt="Image">
                        </div>
                    </div>
                    <div class="carousel-item">
                        <div class="image-container">
                            <img src="@Model.ImageThumbnailUrl" alt="Image">
                        </div>
                    </div>
                </div>
                <a class="carousel-control-prev" href="#product-carousel" data-slide="prev">
                    <i class="fa fa-2x fa-angle-left text-dark"></i>
                </a>
                <a class="carousel-control-next" href="#product-carousel" data-slide="next">
                    <i class="fa fa-2x fa-angle-right text-dark"></i>
                </a>
            </div>
        </div>

        <div class="col-lg-7 pb-5">
            <h3 class="font-weight-semi-bold">@Model.Name</h3>
            <h3 class="font-weight-semi-bold mb-4">$@Model.Price</h3>
            <p class="mb-4">@Html.Raw(Model.Description)</p>
            <div class="d-flex align-items-center mb-4 pt-2">
                <div class="input-group quantity mr-3" style="width: 130px;">
                    <div class="input-group-btn">
                        <button class="btn btn-primary btn-minus">
                            <i class="fa fa-minus"></i>
                        </button>
                    </div>
                    <input type="text" class="form-control bg-secondary text-center" value="1" id="pro-qty-number">
                    <div class="input-group-btn">
                        <button class="btn btn-primary btn-plus">
                            <i class="fa fa-plus"></i>
                        </button>
                    </div>
                </div>
                <button class="btn btn-primary px-3" id="add-to-cart"><i class="fa fa-shopping-cart mr-1"></i> Add To Cart</button>
            </div>
        </div>
    </div>
</div>
<!-- Shop Detail End -->
<script>
    function resizeCarouselImages() {
        const carouselImages = document.querySelectorAll(".carousel-item img");
        const screenWidth = window.innerWidth;

        carouselImages.forEach(image => {
            let desiredWidth = 400;  // Kích thước mong muốn cho hình ảnh
            let desiredHeight = 500; // Kích thước mong muốn cho hình ảnh

            if (screenWidth < 768) {
                // Thay đổi kích thước cho kích thước màn hình nhỏ hơn 768px
                desiredWidth = 200;
                desiredHeight = 300;
            } else if (screenWidth < 1024) {
                // Thay đổi kích thước cho kích thước màn hình từ 768px đến 1024px
                desiredWidth = 300;
                desiredHeight = 400;
            }

            image.style.width = desiredWidth + "px";
            image.style.height = desiredHeight + "px";
        });
    }
    window.addEventListener("resize", resizeCarouselImages);
    document.addEventListener("DOMContentLoaded", function () {
        resizeCarouselImages();
        document.getElementById("add-to-cart").addEventListener("click", function () {
            let checkAuth = "@ViewBag.Auth";
            if (checkAuth == "True") {
                let proQty = parseInt(document.getElementById("pro-qty-number").value);
                let cartItems = getCartItems();

                let existingItemIndex = findCartItemIndex(cartItems, @Model.Id);

                if (proQty <= 0) {
                    if (existingItemIndex !== -1) {
                        cartItems.splice(existingItemIndex, 1);
                        localStorage.setItem("cartItems", JSON.stringify(cartItems));
                    }
                } 
                else {
                    if (existingItemIndex !== -1) {
                        cartItems[existingItemIndex].Quantity += proQty;
                    } else {
                        let obj = {
                            Id: @Model.Id,
                            Name: "@Model.Name",
                            Price: @Model.Price,
                            Quantity: proQty,
                            ImageUrl: "@Model.ImageThumbnailUrl"
                        };
                        cartItems.push(obj);
                    }

                    localStorage.setItem("cartItems", JSON.stringify(cartItems));

                    showToast();
                    updateCartItemCount();
                }
            }
            else {
                alert("You are not logged in. Please log in to remove items from the cart.");
                // Redirect to the login page
                window.location.href = "/Account/Login"; // Change this URL to your login page
            }

        });

        function getCartItems() {
            return JSON.parse(localStorage.getItem("cartItems")) || [];
        }

        function updateCartItemCount() {
            let cartItems = getCartItems();
            let totalCount = cartItems.length;
            document.getElementById("cart-item-count").textContent = totalCount;
        }

        function findCartItemIndex(cartItems, itemId) {
            for (let i = 0; i < cartItems.length; i++) {
                if (cartItems[i].Id === itemId) {
                    return i;
                }
            }
            return -1;
        }

        function showToast() {
            let toast = new bootstrap.Toast(document.getElementById("toast"), {
                autohide: true,
                delay: 3000
            });
            toast.show();
        }
       

       
    });
</script>
