@{
    ViewData["Title"] = "Cart";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .max-width-150 {
        max-width: 150px;
    }
</style>

<!-- Page Add Section Begin -->
<section class="page-add cart-page-add">
    <!-- ... (giữ nguyên phần này) ... -->
</section>
<!-- Page Add Section End -->
<!-- Cart Page Section Begin -->
<div class="container-fluid pt-5">
    <div class="row px-xl-5">
        <div class="col-lg-8 table-responsive mb-5">
            <table class="table table-bordered text-center mb-0">
                <thead class="bg-secondary text-dark">
                    <tr>
                        <th>Products</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Total</th>
                        <th>Remove</th>
                    </tr>
                </thead>
                <tbody class="align-middle" id="cart-items">
                    <!-- Đây là nơi chúng ta sẽ thêm thông tin sản phẩm từ localStorage bằng JavaScript -->
                    
                </tbody>

            </table>
            <div id="empty-cart-msg" class="text-center my-3" style="display: none;">
                Your cart is empty.
            </div>
        </div>
        <div class="col-lg-4">
            <form class="mb-5" action="">
                <div class="input-group">
                    <input type="text" class="form-control p-4" placeholder="Coupon Code">
                    <div class="input-group-append">
                        <button class="btn btn-primary">Apply Coupon</button>
                    </div>
                </div>
            </form>
            <div class="card border-secondary mb-5">
                <div class="card-header bg-secondary border-0">
                    <h4 class="font-weight-semi-bold m-0">Cart Summary</h4>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between mb-3 pt-1">
                        <h6 class="font-weight-medium">Subtotal</h6>
                        <h6 class="font-weight-medium" id="sub-total">$0</h6>
                    </div>
                    <div class="d-flex justify-content-between">
                        <h6 class="font-weight-medium">Shipping</h6>
                        <h6 class="font-weight-medium" id="shipping-fee">$0</h6>
                    </div>
                </div>
                <div class="card-footer border-secondary bg-transparent">
                    <div class="d-flex justify-content-between mt-2">
                        <h5 class="font-weight-bold">Total</h5>
                        <h5 class="font-weight-bold" id="total-cart-price">$0</h5>
                    </div>
                    <a asp-controller="ManageProduct" asp-action="CheckoutOut" class="btn btn-block btn-primary my-3 py-3">Proceed To Checkout</a>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const cartItems = getCartItemsFromLocalStorage();
        const cartItemsContainer = document.getElementById("cart-items");
        const emptyCartMsg = document.getElementById("empty-cart-msg");
        const subTotalElement = document.getElementById("sub-total");
        const shippingFeeElement = document.getElementById("shipping-fee");
        const totalCartPriceElement = document.getElementById("total-cart-price");

        function updateCart() {
            const updatedCartItems = getCartItemsFromLocalStorage();

            if (updatedCartItems.length === 0) {
                emptyCartMsg.style.display = "block";
                cartItemsContainer.innerHTML = "";
                subTotalElement.textContent = "$0";
                shippingFeeElement.textContent = "$0";
                totalCartPriceElement.textContent = "$0";
            } else {
                let cartTotal = 0;
                cartItemsContainer.innerHTML = "";

                updatedCartItems.forEach(item => {
                    const row = document.createElement("tr");
                    const itemTotal = item.Price * item.Quantity;
                    cartTotal += itemTotal;

                    row.innerHTML = `
                                <td class="product-col align-middle">
                <img src="${item.ImageUrl}" alt="" class="max-width-150">
        <div class="p-title text-center">
            <h5>${item.Name}</h5>
        </div>
    </td>
    <td class="price-col align-middle text-center">$${item.Price}</td>
    <td class="quantity-col align-middle text-center">
        <div class="quantity-control d-flex justify-content-center align-items-center">
            <button class="quantity-minus" data-id="${item.Id}">-</button>
            <input type="number" class="quantity-input mx-2" value="${item.Quantity}" min="1" max="10">
            <button class="quantity-plus" data-id="${item.Id}">+</button>   
        </div>
    </td>
    <td class="total align-middle text-center">$${itemTotal}</td>
    <td class="product-close align-middle text-center"><button class="remove-item" data-id="${item.Id}">x</button></td>
                    `;
                    cartItemsContainer.appendChild(row);
                });

                const shippingFee = cartTotal * 0.1;
                const subTotal = cartTotal;
                const totalCartPrice = cartTotal + shippingFee;
                subTotalElement.textContent = `$${subTotal.toFixed(2)}`;
                shippingFeeElement.textContent = `$${shippingFee.toFixed(2)}`;
                totalCartPriceElement.textContent = `$${totalCartPrice.toFixed(2)}`;
                
            }
        }

        function updateCartItemQuantity(productId, newQuantity) {
            const updatedCartItems = cartItems.map(item => {
                if (item.Id == productId) {
                    item.Quantity = newQuantity;
                }
                return item;
            });
            localStorage.setItem("cartItems", JSON.stringify(updatedCartItems));
            updateCart();
        }

        function removeCartItem(productId) {
            const updatedCartItems = cartItems.filter(item => item.Id != productId);
            localStorage.setItem("cartItems", JSON.stringify(updatedCartItems));
            updateCart();
        }

        function getCartItemsFromLocalStorage() {
            const cartItemsJSON = localStorage.getItem("cartItems");
            return cartItemsJSON ? JSON.parse(cartItemsJSON) : [];
        }

        cartItemsContainer.addEventListener("click", function (event) {
            if (event.target.classList.contains("remove-item")) {
                const productId = event.target.getAttribute("data-id");
                removeCartItem(productId);
            }
        });

        cartItemsContainer.addEventListener("change", function (event) {
            if (event.target.classList.contains("quantity-input")) {
                const productId = event.target.closest("tr").querySelector(".remove-item").getAttribute("data-id");
                const newQuantity = parseInt(event.target.value);
                if (newQuantity >= 1) {
                    updateCartItemQuantity(productId, newQuantity);
                } else {
                    event.target.value = 1;
                }
            }
        });

        cartItemsContainer.addEventListener("click", function (event) {
            if (event.target.classList.contains("quantity-minus")) {
                const productId = event.target.getAttribute("data-id");
                const input = event.target.parentNode.querySelector(".quantity-input");
                const newQuantity = parseInt(input.value) - 1;

                if (newQuantity >= 1) {
                    updateCartItemQuantity(productId, newQuantity);
                } else {
                    const shouldRemove = confirm("Do you want to remove the item from your cart?");
                    debugger
                    if (shouldRemove) {
                        removeCartItem(productId);
                    } else {
                        input.value = 1;
                        updateCartItemQuantity(productId, 1);
                    }
                }
            }
        });

        cartItemsContainer.addEventListener("click", function (event) {
            if (event.target.classList.contains("quantity-plus")) {
                const productId = event.target.getAttribute("data-id");
                const input = event.target.parentNode.querySelector(".quantity-input");
                const newQuantity = parseInt(input.value) + 1;

                if (newQuantity <= 10) {
                    updateCartItemQuantity(productId, newQuantity);
                } else {
                    input.value = 10;
                }
            }
        });

        updateCart();
    });

</script>